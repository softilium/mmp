// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Mmp.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class TwoFactorResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The isMachineRemembered property</summary>
        public bool? IsMachineRemembered { get; set; }
        /// <summary>The isTwoFactorEnabled property</summary>
        public bool? IsTwoFactorEnabled { get; set; }
        /// <summary>The recoveryCodes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? RecoveryCodes { get; set; }
#nullable restore
#else
        public List<string> RecoveryCodes { get; set; }
#endif
        /// <summary>The recoveryCodesLeft property</summary>
        public int? RecoveryCodesLeft { get; set; }
        /// <summary>The sharedKey property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SharedKey { get; set; }
#nullable restore
#else
        public string SharedKey { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Mmp.Client.Models.TwoFactorResponse"/> and sets the default values.
        /// </summary>
        public TwoFactorResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Mmp.Client.Models.TwoFactorResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Mmp.Client.Models.TwoFactorResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Mmp.Client.Models.TwoFactorResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "isMachineRemembered", n => { IsMachineRemembered = n.GetBoolValue(); } },
                { "isTwoFactorEnabled", n => { IsTwoFactorEnabled = n.GetBoolValue(); } },
                { "recoveryCodes", n => { RecoveryCodes = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "recoveryCodesLeft", n => { RecoveryCodesLeft = n.GetIntValue(); } },
                { "sharedKey", n => { SharedKey = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("isMachineRemembered", IsMachineRemembered);
            writer.WriteBoolValue("isTwoFactorEnabled", IsTwoFactorEnabled);
            writer.WriteCollectionOfPrimitiveValues<string>("recoveryCodes", RecoveryCodes);
            writer.WriteIntValue("recoveryCodesLeft", RecoveryCodesLeft);
            writer.WriteStringValue("sharedKey", SharedKey);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
