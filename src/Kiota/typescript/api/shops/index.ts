/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createShopFromDiscriminatorValue, serializeShop, type Shop } from '../../models/index.js';
// @ts-ignore
import { ShopsItemRequestBuilderRequestsMetadata, type ShopsItemRequestBuilder } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /api/shops
 */
export interface ShopsRequestBuilder extends BaseRequestBuilder<ShopsRequestBuilder> {
    /**
     * Gets an item from the mmp.Client.api.shops.item collection
     * @param id Unique identifier of the item
     * @returns {ShopsItemRequestBuilder}
     */
     byId(id: number) : ShopsItemRequestBuilder;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Shop[]>}
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Shop[] | undefined>;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Shop>}
     */
     post(body: Shop, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Shop | undefined>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Shop, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const ShopsRequestBuilderUriTemplate = "{+baseurl}/api/shops";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ShopsRequestBuilderNavigationMetadata: Record<Exclude<keyof ShopsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byId: {
        requestsMetadata: ShopsItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ShopsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: ShopsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "sendCollection",
        responseBodyFactory:  createShopFromDiscriminatorValue,
    },
    post: {
        uriTemplate: ShopsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createShopFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeShop,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
